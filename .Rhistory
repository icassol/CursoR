install.packages(c("cluster", "nlme", "rpart", "shiny", "xtable"))
install.packages("kableExtra")
install.packages("DT")
install.packages("revealjs")
library('revealjs')
unlink('Mod2_cache', recursive = TRUE)
if (!"BiocStyle" %in% rownames(installed.packages()))
BiocManager::install("BiocStyle")
library(BiocStyle)
BiocStyle::markdown()
options(width=100)
knitr::opts_chunk$set(cache=TRUE, autodep=TRUE)
atendidos <- c(728,632,596,689,745,865,694,583,657,643,794,887)
atendidos
class(atendidos)
plot(atendidos)
atendidos2 <- ts(atendidos,frequency=12,start=c(2009,1))
atendidos2
class(atendidos2)
plot(atendidos2)
library("plyr")
if (!is.element("readr", installed.packages()[,1])){
install.packages("readr", repos = "http://mirror.fcaglp.unlp.edu.ar/CRAN/")
}
library("readr")
library("plyr")
head(mutate(airquality, Ozone = -Ozone))
a <- 2.15
b <- 3
c <- as.integer(a) # para transformar un variable float en entera.
sexo <- c("M", "H", "M", "M", "M", "H", "M", "M", "H", "H")
sexo
sexo <- factor(sexo)
sexo
sexo <- factor(sexo,levels=c("H","M"),labels=c("Hombre","Mujer"))
sexo
table(sexo)
produccion=c(120,100,132,112,95,164,172,183,155,176,110,115,122,108,120)
maquina=c(27,27,27,27,27,32,32,32,32,32,55,55,55,55,55)
dia=c(1,2,3,4,5,1,2,3,4,5,1,2,3,4,5)
cbind(maquina,dia,produccion)
maquina=factor(maquina)
maquina
as.numeric(maquina)
as.numeric(as.character(maquina))
a <- 2
b <- 4
a==b  # ¿es a igual a b?
a!=b  # ¿es a distinto de b?
(a<3)&(b<5)  # ¿es a menor que 3 y b menor que 3?
(a<1)|(b<3)  # ¿es a menor que 1 o b menor que 3?
any(c(a==2, a==3, a==4))
any(c(a==3, a==4, a==5, a==6))
all(c(a==2, b==4, 2<3))
edad <- c(22, 34, 29, 25, 30, 33, 31, 27, 25, 25)
edad
class(edad)
x <- c(1,4,5,2,4,5,4,3,2,2,3,2,2,4,4,5,5,6,6,7)
length(x)
edad <- c(22, 34, 29, 25, 30, 33, 31, 27, 25, 25)
edad[3]
edad[5]
x <- 1:10
x
x <- seq(1,20,by=2)
x
y <- seq(1,20,length=8)
y
edad[2:5]
edad[c(1,3,7)]
x <- 1:10
a <- 2
a %in% x
b <- c(6,8,14,2,15)
b %in% x
edad <- c(22, 34, 29, 25, 30, 33, 31, 27, 25, 25)
which(edad>25)
mayores25 <- which(edad>25)
edad[mayores25]
edad[edad>25]
sexo <- c("M","H","H","M","M","H","M","M","H","H")
edad[sexo=="M"]
unique(sexo)
table(edad)
x <- seq(2,20,by=2)  # Números pares entre 2 y 20
x
y <- seq(1,20,by=2)  # Números impares entre 1 y 20
y
x+y
x-y
x*y
x/y
letras <- c("a","b","c","d")
class(letras)
paste("A","B",sep="-")
codigos <- paste(c("A", "B"), 2:3, sep = "")
codigos
codigos <- paste(c("A", "B"), 2:3, sep = ".")
codigos
paste(c("una", "frase", "simple"), collapse = " ")
substr("abcdef", 2, 4)
x <- "ABCDEF"
x
substr(x, 3, 5) <- c("uv")
x
if (!is.element("stringr", installed.packages()[,1])){
install.packages("stringr")
}
library(stringr)
A <- matrix(nrow=3,ncol=3, c(1,2,3,4,5,6,7,8,9), byrow=TRUE)
A
A[2,3]   # Se selecciona el valor de la fila 2, columna 3
A[2,]    # Se selecciona la fila 2 completa
A[,3]    # Se selecciona la columna 3 completa
A[1,2:3] # Se seleccionan el segundo y tercer valor de la fila 1
vector1 = c(1,2,3,4)
vector2 = c(5,6,7,8)
vector3 = c(9,10,11,12)
M1 = cbind(vector1,vector2,vector3) # Unimos por columnas
M1
diag(A)
edad <- c(22, 34, 29, 25, 30, 33, 31, 27, 25, 25)
tiempo <- c(14.21, 10.36, 11.89, 13.81, 12.03, 10.99, 12.48, 13.37, 12.29, 11.92)
sexo <- c("M","H","H","M","M","H","M","M","H","H")
misDatos <- data.frame(edad,tiempo,sexo)
misDatos
str(misDatos)    # Estructura de 'misDatos'
names(misDatos)  # Nombre de las variables contenidas en 'misDatos'
str(M1)
M2<-as.data.frame(M1)
str(M2)
misDatos[3:6,] #Mostrar solo las personas de las filas 3 a 6.
misDatos[,1] #Mostrar solo la edad de las personas.
misDatos$edad #Otra manera de mostrar solo la edad de las personas.
misDatos[,"edad"] #Otra manera de mostrar solo la edad de las personas.
medidas <- data.frame(longitud=c(6,4,7), peso=c(240,326,315), diametro=c(8,9,9))
with(medidas,{
volumen <- longitud*pi*(diametro/2)^2  # Calcula el volumen de los objetos
densidad <- peso/volumen               # Calcula su densidad
densidad                            # Muestra los valores de densidad
})
hombres <- subset(misDatos,sexo=="H")
hombres
mujeres <- subset(misDatos,sexo=="M")
mujeres
mayores <- subset(misDatos,sexo=="H" & edad>30)
mayores
jov_habladores <- subset(misDatos,sexo=="H" & edad<30 & tiempo>12)
jov_habladores
extremos <- subset(misDatos,edad<25|edad>30)
extremos
hombres <- subset(misDatos,sexo=="H", select=c(edad, tiempo))
hombres
animales1 <- data.frame(animal=c("vaca","perro","rana","lagarto","mosca","jilguero"),
clase=c("mamífero","mamífero","anfibio","reptil","insecto","ave"))
animales2 <- data.frame(animal=c("atún", "cocodrilo", "gato","rana"), clase=c("pez", "reptil", "mamífero","anfibio"))
animales3 <- rbind(animales1,animales2)
animales4=merge(animales1,animales2)
animales5=merge(animales1,animales2,all=TRUE)
superficieAnimales=data.frame(animal=c("perro","tortuga","jilguero",
"cocodrilo","vaca","lagarto","sardina"),
superficie=c("pelo","placas óseas","plumas",
"escamas","pelo","escamas","escamas"))
merge(animales3,superficieAnimales) # Muestra sólo los animales comunes a ambos dataframes
merge(animales3,superficieAnimales, all.x=TRUE) # Muestra todos los animales del primer dataframe.
merge(animales3,superficieAnimales, all.y=TRUE) # Muestra todos los animales del segundo dataframe.
ordenacion <- order(animales1$animal) # Posiciones dentro del dataframe 'animales1' de los animales ordenados alfabéticamente
animales1 <- animales1[ordenacion,]  # Se reordenan las filas del dataframe animales1
animales1 <- animales1[order(animales1$animal),]  # lo mismo pero en una sola línea de código.
misDatos <- misDatos[order(misDatos$edad,misDatos$tiempo),]
table(misDatos[,"sexo"])
table(misDatos[,c("sexo", "edad")])
A <- matrix(1:9,nrow=3)
M <- matrix(1,4,nrow=2)
MiLista <- list(misDatos,A,M=M,x=c(1,2,3,4),e=exp(1))
MiLista$misDatos
MiLista[[1]]
MiLista$A
MiLista[[2]]
MiLista$M
MiLista$x
t.test(tiempo~sexo, data=misDatos)
contraste <- t.test(tiempo~sexo, data=misDatos)
str(contraste)
contraste$conf.int
x="1"
x
class(x)
y=as.integer(x)
y
class(x)
z=as.character(y)
z
class(z)
a <- c(1,2,3,4)
# operaciones entre escalares y arreglos:
a + 5
a*4
b <- a - 10
sqrt(a)
log(a)
# operaciones sobre arreglos:
c <- sort(a)
d <- sort(a,decreasing = TRUE)
min(a)
e <- c(TRUE,FALSE,FALSE,TRUE)
a[e]
a <- c(10,20,30,40,NA)
sum(a)
sum(a, na.rm = TRUE) # el parámetro na.rm = TRUE significa que no se deben tener en cuenta los valores NA.
is.na(a)
a[!is.na(a)]
b <- a[!is.na(a)]
b <- a[a<6]
x <- 1
x^2
log(x)
3*x
1/exp(x)
A = matrix(runif(50),nrow=10) # Matriz de dimensión 10x10 cuyos elementos son valores
# aleatorios con distribución uniforme en (0,1)
A
sumCuadrados=function(x){sum(x^2)}  # Función que calcula la suma de cuadrados de
# los términos de un vector x
apply(A,1,sumCuadrados)  # Devuelve la suma de cuadrados de cada fila de A
apply(A,2,sumCuadrados)  # Devuelve la suma de cuadrados de cada columna de A
grupo=data.frame(edad=c(12,13,12,11,13,14,15,11),sexo=c("H","M","H","H","M","H","M","H"))
tapply(grupo$edad,grupo$sexo,mean) # Edad media para cada sexo
