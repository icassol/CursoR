x <- 1:10
x
x <- seq(1,20,by=2)
x
y <- seq(1,20,length=8)
y
edad[2:5]
edad[c(1,3,7)]
x <- 1:10
a <- 2
a %in% x
b <- c(6,8,14,2,15)
b %in% x
edad <- c(22, 34, 29, 25, 30, 33, 31, 27, 25, 25)
which(edad>25)
mayores25 <- which(edad>25)
edad[mayores25]
edad[edad>25]
sexo <- c("M","H","H","M","M","H","M","M","H","H")
edad[sexo=="M"]
unique(sexo)
table(edad)
x <- seq(2,20,by=2)  # Números pares entre 2 y 20
x
y <- seq(1,20,by=2)  # Números impares entre 1 y 20
y
x+y
x-y
x*y
x/y
letras <- c("a","b","c","d")
class(letras)
paste("A","B",sep="-")
codigos <- paste(c("A", "B"), 2:3, sep = "")
codigos
codigos <- paste(c("A", "B"), 2:3, sep = ".")
codigos
paste(c("una", "frase", "simple"), collapse = " ")
substr("abcdef", 2, 4)
x <- "ABCDEF"
x
substr(x, 3, 5) <- c("uv")
x
if (!is.element("stringr", installed.packages()[,1])){
install.packages("stringr")
}
library(stringr)
A <- matrix(nrow=3,ncol=3, c(1,2,3,4,5,6,7,8,9), byrow=TRUE)
A
A[2,3]   # Se selecciona el valor de la fila 2, columna 3
A[2,]    # Se selecciona la fila 2 completa
A[,3]    # Se selecciona la columna 3 completa
A[1,2:3] # Se seleccionan el segundo y tercer valor de la fila 1
vector1 = c(1,2,3,4)
vector2 = c(5,6,7,8)
vector3 = c(9,10,11,12)
M1 = cbind(vector1,vector2,vector3) # Unimos por columnas
M1
diag(A)
edad <- c(22, 34, 29, 25, 30, 33, 31, 27, 25, 25)
tiempo <- c(14.21, 10.36, 11.89, 13.81, 12.03, 10.99, 12.48, 13.37, 12.29, 11.92)
sexo <- c("M","H","H","M","M","H","M","M","H","H")
misDatos <- data.frame(edad,tiempo,sexo)
misDatos
str(misDatos)    # Estructura de 'misDatos'
names(misDatos)  # Nombre de las variables contenidas en 'misDatos'
str(M1)
M2<-as.data.frame(M1)
str(M2)
misDatos[3:6,] #Mostrar solo las personas de las filas 3 a 6.
misDatos[,1] #Mostrar solo la edad de las personas.
misDatos$edad #Otra manera de mostrar solo la edad de las personas.
misDatos[,"edad"] #Otra manera de mostrar solo la edad de las personas.
medidas <- data.frame(longitud=c(6,4,7), peso=c(240,326,315), diametro=c(8,9,9))
with(medidas,{
volumen <- longitud*pi*(diametro/2)^2  # Calcula el volumen de los objetos
densidad <- peso/volumen               # Calcula su densidad
densidad                            # Muestra los valores de densidad
})
hombres <- subset(misDatos,sexo=="H")
hombres
mujeres <- subset(misDatos,sexo=="M")
mujeres
mayores <- subset(misDatos,sexo=="H" & edad>30)
mayores
jov_habladores <- subset(misDatos,sexo=="H" & edad<30 & tiempo>12)
jov_habladores
extremos <- subset(misDatos,edad<25|edad>30)
extremos
hombres <- subset(misDatos,sexo=="H", select=c(edad, tiempo))
hombres
animales1 <- data.frame(animal=c("vaca","perro","rana","lagarto","mosca","jilguero"),
clase=c("mamífero","mamífero","anfibio","reptil","insecto","ave"))
animales2 <- data.frame(animal=c("atún", "cocodrilo", "gato","rana"), clase=c("pez", "reptil", "mamífero","anfibio"))
animales3 <- rbind(animales1,animales2)
animales4=merge(animales1,animales2)
animales5=merge(animales1,animales2,all=TRUE)
superficieAnimales=data.frame(animal=c("perro","tortuga","jilguero",
"cocodrilo","vaca","lagarto","sardina"),
superficie=c("pelo","placas óseas","plumas",
"escamas","pelo","escamas","escamas"))
merge(animales3,superficieAnimales) # Muestra sólo los animales comunes a ambos dataframes
merge(animales3,superficieAnimales, all.x=TRUE) # Muestra todos los animales del primer dataframe.
merge(animales3,superficieAnimales, all.y=TRUE) # Muestra todos los animales del segundo dataframe.
ordenacion <- order(animales1$animal) # Posiciones dentro del dataframe 'animales1' de los animales ordenados alfabéticamente
animales1 <- animales1[ordenacion,]  # Se reordenan las filas del dataframe animales1
animales1 <- animales1[order(animales1$animal),]  # lo mismo pero en una sola línea de código.
misDatos <- misDatos[order(misDatos$edad,misDatos$tiempo),]
table(misDatos[,"sexo"])
table(misDatos[,c("sexo", "edad")])
A <- matrix(1:9,nrow=3)
M <- matrix(1,4,nrow=2)
MiLista <- list(misDatos,A,M=M,x=c(1,2,3,4),e=exp(1))
MiLista$misDatos
MiLista[[1]]
MiLista$A
MiLista[[2]]
MiLista$M
MiLista$x
t.test(tiempo~sexo, data=misDatos)
contraste <- t.test(tiempo~sexo, data=misDatos)
str(contraste)
contraste$conf.int
x="1"
x
class(x)
y=as.integer(x)
y
class(x)
z=as.character(y)
z
class(z)
a <- c(1,2,3,4)
# operaciones entre escalares y arreglos:
a + 5
a*4
b <- a - 10
sqrt(a)
log(a)
# operaciones sobre arreglos:
c <- sort(a)
d <- sort(a,decreasing = TRUE)
min(a)
e <- c(TRUE,FALSE,FALSE,TRUE)
a[e]
a <- c(10,20,30,40,NA)
sum(a)
sum(a, na.rm = TRUE) # el parámetro na.rm = TRUE significa que no se deben tener en cuenta los valores NA.
is.na(a)
a[!is.na(a)]
b <- a[!is.na(a)]
b <- a[a<6]
x <- 1
x^2
log(x)
3*x
1/exp(x)
A = matrix(runif(50),nrow=10) # Matriz de dimensión 10x10 cuyos elementos son valores
# aleatorios con distribución uniforme en (0,1)
A
sumCuadrados=function(x){sum(x^2)}  # Función que calcula la suma de cuadrados de
# los términos de un vector x
apply(A,1,sumCuadrados)  # Devuelve la suma de cuadrados de cada fila de A
apply(A,2,sumCuadrados)  # Devuelve la suma de cuadrados de cada columna de A
grupo=data.frame(edad=c(12,13,12,11,13,14,15,11),sexo=c("H","M","H","H","M","H","M","H"))
tapply(grupo$edad,grupo$sexo,mean) # Edad media para cada sexo
iris
str(iris)
remove.packages("kableExtra")
install.packages("kableExtra")
library("kableExtra", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:kableExtra", unload=TRUE)
library("kableExtra", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:kableExtra", unload=TRUE)
library("kableExtra", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:kableExtra", unload=TRUE)
remove.packages("kableExtra")
remove.packages("DT")
install.packages("DT")
install.packages("kableExtra")
rmarkdown::render_site()
!!
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::clean_site(preview = TRUE)
rmarkdown::clean_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::render()
rmarkdown::render(input = './Mod6.rmd')
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("boot")
rmarkdown::render()
rmarkdown::render(input = './Mod4.rmd')
rmarkdown::render()
factor?
?factor
rmarkdown::render_site()
View(SalaryGender)
factor?
?factor
PhD=factor(SalaryGender,levels=c(0,3),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
PhD=factor(SalaryGender,levels=c(0,3),labels=c("PhD","non PhD"))
PhD=factor(SalaryGender,levels=c(0,1),labels=c("PhD","non PhD"))
PhD=factor(PhD,levels=c(0,1),labels=c("PhD","non PhD"))
?histStack
data(SalaryGender)
attach(SalaryGender)
Gender=factor(Gender,levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(SalaryGender,Gender,legend.pos="topright")
Salary
SalaryGender[,0]
SalaryGender[,1]
data(SalaryGender)
attach(SalaryGender)
Salary=SalaryGender[,1]
Gender=factor(Gender,levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
PhD=factor(PhD,levels=c(0,1),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
PhD=factor(PhD,levels=c(0,3),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
Gender=factor(Gender,levels=c(0,1),labels=c("Female","Male"))
SalaryGender[,1]
data(SalaryGender)
attach(SalaryGender)
Gender=factor(SalaryGender[,2],levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(SalaryGender[,1],Gender,legend.pos="topright")
?histStack
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(SalaryGender[,2],levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(SalaryGender,Gender,legend.pos="topright")
rmarkdown::clean_site()
git status
rmarkdown::clean_site()
rmarkdown::render_site()
install.packages("Lock5Data", repos = "http://mirror.fcaglp.unlp.edu.ar/CRAN/")
install.packages("Lock5Data", repos = "http://mirror.fcaglp.unlp.edu.ar/CRAN/")
library(Lock5Data)
data(HappyPlanetIndex)
attach(HappyPlanetIndex)
plot(Happiness,LifeExpectancy,pch=19,col="red")
data(HappyPlanetIndex)
attach(HappyPlanetIndex)
hist(Happiness,col="darkolivegreen1")
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(SalaryGender[,2],levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
barplot(table(Region),xlab="Region",main="Happiness level by region", col=rainbow(10))
barp(table(Region),col="lightblue",cylindrical=TRUE,shadow=TRUE)
PhD<-factor(PhD,levels=c(0,1),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
Gender<-factor(SalaryGender[,2],levels=c(0,1),labels=c("Female","Male"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(SalaryGender[,2],levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
PhD<-factor(PhD,levels=c(0,1),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(SalaryGender[,2],levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
barplot(table(Region),xlab="Region",main="Happiness level by region", col=rainbow(10))
barp(table(Region),col="lightblue",cylindrical=TRUE,shadow=TRUE)
if (!is.element("Lock5Data", installed.packages()[,1])){
install.packages("Lock5Data", repos = "http://mirror.fcaglp.unlp.edu.ar/CRAN/")
}
library(Lock5Data)
data(HappyPlanetIndex)
attach(HappyPlanetIndex)
plot(Happiness,LifeExpectancy,pch=19,col="red")
PhD
PhD<-factor(PhD,levels=c(0,1),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
PhD
library(Lock5Data)
data(HappyPlanetIndex)
attach(HappyPlanetIndex)
p
PhD
data(HappyPlanetIndex)
attach(HappyPlanetIndex)
hist(Happiness,col="darkolivegreen1")
`
PhD
PhD
hist(BRCA_all_data$age_at_initial_pathologic_diagnosis,freq=FALSE, col="lightcyan",ylim=c(0,0.05), main="Histograma de la edad de las pacientes",xlab="",ylab="Densidad")
if (!is.element("Lock5Data", installed.packages()[,1])){
install.packages("Lock5Data", repos = "http://mirror.fcaglp.unlp.edu.ar/CRAN/")
}
library(Lock5Data)
data(HappyPlanetIndex)
attach(HappyPlanetIndex)
plot(Happiness,LifeExpectancy,pch=19,col="red")
data(HappyPlanetIndex)
attach(HappyPlanetIndex)
hist(Happiness,col="darkolivegreen1")
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(SalaryGender[,2],levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
barplot(table(Region),xlab="Region",main="Happiness level by region", col=rainbow(10))
barp(table(Region),col="lightblue",cylindrical=TRUE,shadow=TRUE)
PhD<-factor(PhD,levels=c(0,1),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
pie(table(Region))
boxplot(Happiness~Region,col="gold",xlab="Region",ylab="Happiness level",
main="Average happiness level by region")
persp(x = 10*(1:nrow(volcano)), y=10*(1:ncol(volcano)), z=3*volcano,
theta = 135, phi = 30, col = "green3", scale = FALSE,
ltheta = -120, shade = 0.75, border = NA, box = FALSE, main="Volcán Maunga Whau, Auckland, NZ")
data(trees)
trees
with(trees,plot(Girth,Height))
library(readxl)
BRCA_all_data <- read_excel("./resources/BRCA_all_data.xlsx")
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"),
legend.text=c("Vivos","Muertos"),main="Mujeres con cancer de mama",ylim=c(0,0.8),
ylab ="Frecuencias Relativas",las=1,font.axis=4)
barplot(prop.table(table(BRCA_all_data$vital_status)))
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"))
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"),
legend.text=c("Vivos","Muertos"))
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"),
legend.text=c("Vivos","Muertos"),ylim=c(0,0.8))
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"),
legend.text=c("Vivos","Muertos"),xlim=c(0,3.3))
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"),
legend.text=c("Vivos","Muertos"),ylim=c(0,0.8),main="Mujeres con cancer de mama")
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"),
legend.text=c("Vivos","Muertos"),ylim=c(0,0.8),main="Mujeres con cancer de mama",   ylab ="Frecuencias Relativas")
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"),
legend.text=c("Vivos","Muertos"),ylim=c(0,0.8),main="Mujeres con cancer de mama",   ylab ="Frecuencias Relativas",las=1)
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"),
legend.text=c("Vivos","Muertos"),ylim=c(0,0.8),main="Mujeres con cancer de mama",   ylab ="Frecuencias Relativas",las=1,font.axis=4)
hist(BRCA_all_data$age_at_initial_pathologic_diagnosis,freq=FALSE, col="lightcyan",ylim=c(0,0.05), main="Histograma de la edad de las pacientes",xlab="",ylab="Densidad")
curve(dnorm(x,mean=mean(BRCA_all_data$age_at_initial_pathologic_diagnosis),sd=sd(BRCA_all_data$age_at_initial_pathologic_diagnosis)),
add=TRUE, col="blue", lwd=2)
lines(density(BRCA_all_data$age_at_initial_pathologic_diagnosis),col="red",lwd=2)
legend("topleft",col=c("blue","red"),legend =c("Densidad normal estimada","Estimador de núcleo de la densidad"),lwd=2, bty = "n")
hist(BRCA_all_data$age_at_initial_pathologic_diagnosis, main="Histograma de la edad de las pacientes",xlab="",ylab="Densidad")
hist(BRCA_all_data$age_at_initial_pathologic_diagnosis,freq=FALSE, col="lightcyan", main="Histograma de la edad de las pacientes",xlab="",ylab="Densidad")
hist(BRCA_all_data$age_at_initial_pathologic_diagnosis,freq=FALSE, col="lightcyan",ylim=c(0,0.05), main="Histograma de la edad de las pacientes",xlab="",ylab="Densidad")
hist(BRCA_all_data$age_at_initial_pathologic_diagnosis,freq=FALSE, col="lightcyan",ylim=c(0,0.05), main="Histograma de la edad de las pacientes",xlab="",ylab="Densidad")
lines(density(BRCA_all_data$age_at_initial_pathologic_diagnosis),col="red",lwd=2)
hist(BRCA_all_data$age_at_initial_pathologic_diagnosis,freq=FALSE, col="lightcyan",ylim=c(0,0.05), main="Histograma de la edad de las pacientes",xlab="",ylab="Densidad")
lines(density(BRCA_all_data$age_at_initial_pathologic_diagnosis),col="red",lwd=2)
curve(dnorm(x,mean=mean(BRCA_all_data$age_at_initial_pathologic_diagnosis),sd=sd(BRCA_all_data$age_at_initial_pathologic_diagnosis)),
add=TRUE, col="blue", lwd=2)
hist(BRCA_all_data$age_at_initial_pathologic_diagnosis,freq=FALSE, col="lightcyan",ylim=c(0,0.05), main="Histograma de la edad de las pacientes",xlab="",ylab="Densidad")
curve(dnorm(x,mean=mean(BRCA_all_data$age_at_initial_pathologic_diagnosis),sd=sd(BRCA_all_data$age_at_initial_pathologic_diagnosis)),
add=TRUE, col="blue", lwd=2)
lines(density(BRCA_all_data$age_at_initial_pathologic_diagnosis),col="red",lwd=2)
legend("topleft",col=c("blue","red"),legend =c("Densidad normal estimada","Estimador de núcleo de la densidad"),lwd=2, bty = "n")
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"),
legend.text=c("Vivos","Muertos"),ylim=c(0,0.8),main="Mujeres con cancer de mama",   ylab ="Frecuencias Relativas",las=1)
barplot(prop.table(table(BRCA_all_data$vital_status)),col=c("orange","blue"),
legend.text=c("Vivos","Muertos"),ylim=c(0,0.8),main="Mujeres con cancer de mama",   ylab ="Frecuencias Relativas",las=1,font.axis=4)
hist(BRCA_all_data$age_at_initial_pathologic_diagnosis,freq=FALSE, col="lightcyan",ylim=c(0,0.05), main="Histograma de la edad de las pacientes",xlab="",ylab="Densidad")
curve(dnorm(x,mean=mean(BRCA_all_data$age_at_initial_pathologic_diagnosis),sd=sd(BRCA_all_data$age_at_initial_pathologic_diagnosis)),
add=TRUE, col="blue", lwd=2)
lines(density(BRCA_all_data$age_at_initial_pathologic_diagnosis),col="red",lwd=2)
legend("topleft",col=c("blue","red"),legend =c("Densidad normal estimada","Estimador de núcleo de la densidad"),lwd=2, bty = "n")
if (!is.element("Lock5Data", installed.packages()[,1])){
install.packages("Lock5Data", repos = "http://mirror.fcaglp.unlp.edu.ar/CRAN/")
}
library(Lock5Data)
data(HappyPlanetIndex)
attach(HappyPlanetIndex)
plot(Happiness,LifeExpectancy,pch=19,col="red")
data(HappyPlanetIndex)
attach(HappyPlanetIndex)
hist(Happiness,col="darkolivegreen1")
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(SalaryGender[,2],levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
barplot(table(Region),xlab="Region",main="Happiness level by region", col=rainbow(10))
barp(table(Region),col="lightblue",cylindrical=TRUE,shadow=TRUE)
hist(BRCA_all_data$age_at_initial_pathologic_diagnosis,freq=FALSE, col="lightcyan",ylim=c(0,0.05), main="Histograma de la edad de las pacientes",xlab="",ylab="Densidad")
lines(density(BRCA_all_data$age_at_initial_pathologic_diagnosis),col="red",lwd=2)
PhD<-factor(PhD,levels=c(0,1),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
barp(table(Region),col="lightblue",cylindrical=TRUE,shadow=TRUE)
PhD<-factor(PhD,levels=c(0,1),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(SalaryGender[,2],levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
PhD<-factor(PhD,levels=c(0,1),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
PhD<-factor(PhD,levels=c(0,1),labels=c("PhD","non PhD"))
barplot(table(Gender,PhD),beside=TRUE,legend.text=TRUE,col=c("pink","cyan"))
barp(table(Region),col="lightblue",cylindrical=TRUE,shadow=TRUE)
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(SalaryGender[,2],levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
barplot(table(Region),xlab="Region",main="Happiness level by region", col=rainbow(10))
rmarkdown::render_site()
rmarkdown::render_site()
data(SalaryGender)
attach(SalaryGender)
Gender<-factor(Gender,levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,2]
Gender<-factor(Gender,levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(Gender,levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(Gender,levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
?histStack
data(SalaryGender)
attach(SalaryGender)
Salary<-SalaryGender[,1]
Gender<-factor(Salary,levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
data(SalaryGender)
attach(SalaryGender)
Gender=factor(Gender,levels=c(0,1),labels=c("Female","Male"))
library(plotrix)
histStack(Salary,Gender,legend.pos="topright")
rmarkdown::render_supporting_files()
rmarkdown::render_site()
rmarkdown::render_supporting_files(from='.', files_dir = './test')
rmarkdown::render_supporting_files('./test')
rmarkdown::render_supporting_files(files_dir = './test')
rmarkdown::render_site()
rmarkdown::render_site()
rma
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_supporting_files(from = '.', files_dir = './test')
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::clean_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::clean_site()
